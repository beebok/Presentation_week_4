pairs(Smarket)
cor(Smarket)
cor(Smarket[,-9])
attach(Smarket)
plot(Volume)
# Logistic Regression
glm.fit=glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,data=Smarket,family=binomial)
summary(glm.fit)
coef(glm.fit)
summary(glm.fit)$coef
summary(glm.fit)$coef[,4]
glm.probs=predict(glm.fit,type="response")
glm.probs[1:10]
contrasts(Direction)
glm.pred=rep("Down",1250)
glm.pred[glm.probs>.5]="Up"
table(glm.pred,Direction)
# The Stock Market Data
library(ISLR)
names(Smarket)
dim(Smarket)
summary(Smarket)
pairs(Smarket)
cor(Smarket)
cor(Smarket[,-9])
attach(Smarket)
plot(Volume)
# Logistic Regression
glm.fit=glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,data=Smarket,family=binomial)
summary(glm.fit)
coef(glm.fit)
summary(glm.fit)$coef
summary(glm.fit)$coef[,4]
glm.probs=predict(glm.fit,type="response")
glm.probs[1:10]
contrasts(Direction)
glm.pred=rep("Down",1250)
glm.pred[glm.probs>.5]="Up"
table(glm.pred,Direction)
(507+145)/1250
mean(glm.pred==Direction)
train=(Year<2005)
Smarket.2005=Smarket[!train,]
dim(Smarket.2005)
Direction.2005=Direction[!train]
glm.fit=glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,data=Smarket,family=binomial,subset=train)
glm.probs=predict(glm.fit,Smarket.2005,type="response")
glm.pred=rep("Down",252)
glm.pred[glm.probs>.5]="Up"
table(glm.pred,Direction.2005)
mean(glm.pred==Direction.2005)
mean(glm.pred!=Direction.2005)
glm.fit=glm(Direction~Lag1+Lag2,data=Smarket,family=binomial,subset=train)
glm.probs=predict(glm.fit,Smarket.2005,type="response")
glm.pred=rep("Down",252)
glm.pred[glm.probs>.5]="Up"
table(glm.pred,Direction.2005)
mean(glm.pred==Direction.2005)
106/(106+76)
predict(glm.fit,newdata=data.frame(Lag1=c(1.2,1.5),Lag2=c(1.1,-0.8)),type="response")
1/40
13/60
exam_1<-c(58,36,67,55,63,53,67,55,56,65,60,46,67,53,65,67,70,63,59,62,63,60,53,70,68,52,48,55,70,60,64,52,46,68,37,59,59,63,60)
length(exam_1)
hist(exam_1)
exam_1<-c(58,36,67,55,63,53,67,55,56,65,60,46,67,53,65,67,70,63,59,62,63,60,53,70,68,52,48,55,70,60,64,52,46,68,37,59,59,63,60)
mean(exam_1)
median(exam_1)
sd(exam_1)
min(exam_1)
max(exam_1)
plot(exam_1)
sort(exam_1)
plot(sort(exam_1))
abline(sort(exam_1))
exam_1<-c(58,36,67,55,63,53,67,55,56,65,60,46,67,53,65,67,70,63,59,62,63,60,53,70,68,52,48,55,70,60,64,52,46,68,37,59,59,63,60)
hist(exam_1)
exam_1<-c(58,36,67,55,63,53,67,55,56,65,60,46,67,53,65,67,70,63,59,62,63,60,53,70,68,52,48,55,70,60,64,52,46,68,37,59,59,63,60)
mode(exam_1)
median(exam_1)
mean(exam_1)
median(exam_1)
mean(exam_1)
exam_1<-c(58,36,67,55,63,53,67,55,56,65,60,46,67,53,65,67,70,63,59,62,63,60,53,70,68,52,48,55,70,60,64,52,46,68,37,59,59,63,60)
exam_1<-c(58,36,67,55,63,53,67,55,56,65,60,46,67,53,65,67,70,63,59,62,63,60,53,70,68,52,48,55,70,60,64,52,46,68,37,59,59,63,60)
hist(exam_!)
hist(exam_1)
exam_1<-c(58,36,67,55,63,53,67,55,56,65,60,46,67,53,65,67,70,63,59,62,63,60,53,70,68,52,48,55,70,60,64,52,46,68,37,59,59,63,60)
hist(exam_1)
mean(exam_1)
median(exam_1)
mode(exam_1)
# Chapter 6 Lab 1: Subset Selection Methods
# Best Subset Selection
library(ISLR)
fix(Hitters)
names(Hitters)
dim(Hitters)
sum(is.na(Hitters$Salary))
Hitters=na.omit(Hitters)
dim(Hitters)
sum(is.na(Hitters))
library(leaps)
regfit.full=regsubsets(Salary~.,Hitters)
summary(regfit.full)
regfit.full=regsubsets(Salary~.,data=Hitters,nvmax=19)
reg.summary=summary(regfit.full)
names(reg.summary)
reg.summary$rsq
par(mfrow=c(2,2))
par(mfrow=c(2,2))
plot(reg.summary$rss,xlab="Number of Variables",ylab="RSS",type="l")
plot(reg.summary$adjr2,xlab="Number of Variables",ylab="Adjusted RSq",type="l")
which.max(reg.summary$adjr2)
points(11,reg.summary$adjr2[11], col="red",cex=2,pch=20)
plot(reg.summary$cp,xlab="Number of Variables",ylab="Cp",type='l')
which.min(reg.summary$cp)
1-0.9973
0.0027/2
# Chapter 6 Lab 1: Subset Selection Methods
# Best Subset Selection
library(ISLR)
fix(Hitters)
names(Hitters)
dim(Hitters)
sum(is.na(Hitters$Salary))
Hitters=na.omit(Hitters)
dim(Hitters)
sum(is.na(Hitters))
library(leaps)
regfit.full=regsubsets(Salary~.,Hitters)
summary(regfit.full)
regfit.full=regsubsets(Salary~.,data=Hitters,nvmax=19)
reg.summary=summary(regfit.full)
names(reg.summary)
reg.summary$rsq
par(mfrow=c(2,2))
par(mfrow=c(2,2))
plot(reg.summary$rss,xlab="Number of Variables",ylab="RSS",type="l")
plot(reg.summary$adjr2,xlab="Number of Variables",ylab="Adjusted RSq",type="l")
which.max(reg.summary$adjr2)
points(11,reg.summary$adjr2[11], col="red",cex=2,pch=20)
plot(reg.summary$cp,xlab="Number of Variables",ylab="Cp",type='l')
which.min(reg.summary$cp)
runDeck()
58/70+65/80
1.641/2
52/70
52/70+67/80
1.580357/2
Exam_2_scores<-c(80,65,47,60,80,73,80,51,73,70,69,36,75,65,70,73,80,73,44,41,76,77,78,76,20,33,50,77,64,80,67,37,71,53,80,64,59,64)
hist(Exam_2_scores)
Exam_2_scores<-c(80,65,47,60,80,73,80,51,73,70,69,36,75,65,70,73,80,73,44,41,76,77,78,76,20,33,50,77,64,80,67,37,71,53,80,64,59,64)
hist(Exam_2_scores,breaks=10)
Exam_2_scores<-c(80,65,47,60,80,73,80,51,73,70,69,36,75,65,70,73,80,73,44,41,76,77,78,76,20,33,50,77,64,80,67,37,71,53,80,64,59,64)
hist(Exam_2_scores,breaks=20)
mean(Exam_2_scores)
Exam_2_scores<-c(80,65,47,60,80,73,80,51,73,70,69,36,75,65,70,73,80,73,44,41,76,77,78,76,20,33,50,77,64,80,67,37,71,53,80,64,59,64)
hist(Exam_2_scores,breaks=20)
mean(Exam_2_scores)
median(Exam_2_scores)
length(Exam_2_scores)
stem(Exam_2_scores)
sd(Exam_2_scores)
install.packages("cartographer")
install.packages("cartographer")
devtools::install_github("lmullen/cartographer")
install.packages("historydata")
install.packages("dplyr")
library(cartographer)
library(historydata)
library(dplyr)
library(cartographer)
library(historydata)
library(dplyr)
cartographer() %>%
tile_layer()
library(cartographer)
library(historydata)
library(dplyr)
cartographer() %>%
tile_layer(provider = "stamen", path = "toner-background")
library(cartographer)
library(historydata)
library(dplyr)
cartographer() %>%
tile_layer(provider = "mapbox", path = "mapbox.natural-earth-hypso-bathy")
library(cartographer)
library(historydata)
library(dplyr)
cartographer() %>%
tile_layer(provider = "mapbox", path = "mapbox.natural-earth-hypso-bathy")
# perform Ekholm (2012,2014) analysis on some popular mutual funds
# Ekholm, A.G., 2012
# Portfolio returns and manager activity:
#    How to decompose tracking error into security selection and market timing
# Journal of Empirical Finance, Volume 19, pp 349-€“358
# Ekholm, Anders G., July 21, 2014
# Components of Portfolio Variance:
#    R2, SelectionShare and TimingShare
# Available at SSRN: http://ssrn.com/abstract=2463649
library(Quandl)  # use to get Fama/French factors
library(pipeR)   # pipes are the future or R
library(rlist)   # rlist - like underscore/lodash for R lists
library(dplyr)   # super fast and really powerful
library(tidyr)   # next gen wide/long formatter package
library(latticeExtra) # old but still awesome
library(directlabels) # fantastic and works with ggplot & lattice
library(quantmod) # also will load xts
# use Quandl Kenneth French Fama/French factors
# http://www.quandl.com/KFRENCH/FACTORS_D
f <- Quandl("KFRENCH/FACTORS_D",type = "xts") / 100
# grab our function from post
# http://timelyportfolio.blogspot.com/2014/10/selectionshare-timingshare-masterfully.html
source(paste0(
"https://gist.githubusercontent.com/timelyportfolio/e5728c8c7fb45dbdb6e0",
"/raw/e124379f19225fcdee18f30cb848da6fc6cae764/ekholm.R"
))
c( "FCNTX", "AGTHX", "SEQUX", "FPACX" ) %>>%
(~ lapply(
.
,function(ticker) {
ticker %>>%
getSymbols( from = "1896-01-01", auto.assign = F ) %>>%
(fund ~
structure(
fund[,6] / stats::lag( fund[,6], 1 ) - 1
,dimnames = list(NULL,gsub(x = colnames(fund)[6], pattern  = "[\\.]Adjusted", replacement = ""))
)
) %>>%
merge( f ) %>>% #  Quandl("KFRENCH/FACTORS_D",type = "xts") / 100
na.omit %>>%
rollapply (
FUN= function(x){
x %>>%
jensen_ekholm %>>%
( data.frame( summary(.[["linmod"]])$"r.squared" , .$ekholm ) )  %>>%
xts(order.by=tail(index(x),1)) -> return_df
colnames(return_df)[1] <- "R_sq"
return(return_df)
}
, width = 500
#, by = 100
, by.column=F
, fill = NULL
) %>>%
na.fill(0)
}) -> ekFunds
) %>>%
( names(ekFunds) = . )
ekFunds %>>%
list.map(
f(fund,i) -> {
structure(
data.frame(
date = index(fund)
, fund = names(ekFunds)[i]
, fund
)
) %>>%
gather(measure,value,-date,-fund)
}
) %>>%
(
do.call( rbind , . )
) -> ekT
ekT %>>%
# just plot at R^2, SelectionShare, and TimingShare
filter( measure %in% c("R_sq","SelectionShare","TimingShare") ) %>>%
(
xyplot(
value ~ date | measure
, groups = fund
, data = .
, type = "l"
# using direct.label so not necessary
, auto.key = list( space = "right" )
# title our plot
, main = paste(
"Comparison of Ekholm Decomposition for Various Mutual Funds"
,paste0("2 Year Rolling since ",format(.$date[1],format="%b %d, %Y"))
,sep="\n"
)
# layout one on top of the other
, layout = c(1,length(unique(.$measure)))
)
) %>>%
# I like labels on plot rather than legend
directlabels::direct.label( method = "last.qp" ) %>>%
# pretty it up with the latticeExtra Economist theme
asTheEconomist
library(cartographer)
library(historydata)
library(dplyr)
cartographer() %>%
tile_layer(provider = "mapbox", path = "mapbox.natural-earth-hypso-bathy")
# perform Ekholm (2012,2014) analysis on some popular mutual funds
# Ekholm, A.G., 2012
# Portfolio returns and manager activity:
#    How to decompose tracking error into security selection and market timing
# Journal of Empirical Finance, Volume 19, pp 349-€“358
# Ekholm, Anders G., July 21, 2014
# Components of Portfolio Variance:
#    R2, SelectionShare and TimingShare
# Available at SSRN: http://ssrn.com/abstract=2463649
library(Quandl)  # use to get Fama/French factors
library(pipeR)   # pipes are the future or R
library(rlist)   # rlist - like underscore/lodash for R lists
library(dplyr)   # super fast and really powerful
library(tidyr)   # next gen wide/long formatter package
library(latticeExtra) # old but still awesome
library(directlabels) # fantastic and works with ggplot & lattice
library(quantmod) # also will load xts
# use Quandl Kenneth French Fama/French factors
# http://www.quandl.com/KFRENCH/FACTORS_D
f <- Quandl("KFRENCH/FACTORS_D",type = "xts") / 100
# grab our function from post
# http://timelyportfolio.blogspot.com/2014/10/selectionshare-timingshare-masterfully.html
source(paste0(
"https://gist.githubusercontent.com/timelyportfolio/e5728c8c7fb45dbdb6e0",
"/raw/e124379f19225fcdee18f30cb848da6fc6cae764/ekholm.R"
))
c( "FCNTX", "AGTHX", "SEQUX", "FPACX" ) %>>%
(~ lapply(
.
,function(ticker) {
ticker %>>%
getSymbols( from = "1896-01-01", auto.assign = F ) %>>%
(fund ~
structure(
fund[,6] / stats::lag( fund[,6], 1 ) - 1
,dimnames = list(NULL,gsub(x = colnames(fund)[6], pattern  = "[\\.]Adjusted", replacement = ""))
)
) %>>%
merge( f ) %>>% #  Quandl("KFRENCH/FACTORS_D",type = "xts") / 100
na.omit %>>%
rollapply (
FUN= function(x){
x %>>%
jensen_ekholm %>>%
( data.frame( summary(.[["linmod"]])$"r.squared" , .$ekholm ) )  %>>%
xts(order.by=tail(index(x),1)) -> return_df
colnames(return_df)[1] <- "R_sq"
return(return_df)
}
, width = 500
#, by = 100
, by.column=F
, fill = NULL
) %>>%
na.fill(0)
}) -> ekFunds
) %>>%
( names(ekFunds) = . )
ekFunds %>>%
list.map(
f(fund,i) -> {
structure(
data.frame(
date = index(fund)
, fund = names(ekFunds)[i]
, fund
)
) %>>%
gather(measure,value,-date,-fund)
}
) %>>%
(
do.call( rbind , . )
) -> ekT
ekT %>>%
# just plot at R^2, SelectionShare, and TimingShare
filter( measure %in% c("R_sq","SelectionShare","TimingShare") ) %>>%
(
xyplot(
value ~ date | measure
, groups = fund
, data = .
, type = "l"
# using direct.label so not necessary
, auto.key = list( space = "right" )
# title our plot
, main = paste(
"Comparison of Ekholm Decomposition for Various Mutual Funds"
,paste0("2 Year Rolling since ",format(.$date[1],format="%b %d, %Y"))
,sep="\n"
)
# layout one on top of the other
, layout = c(1,length(unique(.$measure)))
)
) %>>%
# I like labels on plot rather than legend
directlabels::direct.label( method = "last.qp" ) %>>%
# pretty it up with the latticeExtra Economist theme
asTheEconomist
Org <- gvisOrgChart(Regions, options=list(width=600, height=250,
size='large', allowCollapse=TRUE))
plot(Org)
library("assertthat", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("bitops", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("boot", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("Cairo", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("cartographer", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("caTools", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("class", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("cluster", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("codetools", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("colorspace", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("compiler", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("DBI", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("dichromat", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("digest", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("evaluate", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("foreign", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("formatR", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("googleVis", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("glmnet", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("grid", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("gtable", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("highr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("historydata", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("htmltools", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("htmlwidgets", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("httpuv", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("httr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("ISLR", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("jsonlite", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("KernSmooth", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("knitr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("labeling", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("lattice", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("lazyeval", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("leaps", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("magrittr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("manipulate", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("markdown", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("MASS", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("memoise", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("mgcv", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("mime", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("munsell", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("nnet", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("parallel", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("pls", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("proto", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("plyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("R.cache", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("R.methodsS3", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("R.oo", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("R.rsp", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("R.utils", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
detach("package:R.utils", unload=TRUE)
library("R.utils", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("R6", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("randomForest", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("rattle", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("rCharts", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("RColorBrewer", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("Rcpp", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("RCurl", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("reshape2", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("rgdal", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("RJSONIO", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("rmarkdown", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("rpart", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("rstudio", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("rstudioapi", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("scales", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("shinyapps", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("shiny", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("slidify", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("slidifyLibraries", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("spatial", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("splines", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("stringr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("stats4", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("survival", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("tcltk", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("testthat", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("tools", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("WDI", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("whisker", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("XML", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("xtable", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("yaml", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
runDeck()
BC_WA_OR_CA_sardine_data <- read.csv("~/GitHub/presentation/BC_WA_OR_CA_sardine_data.csv")
View(BC_WA_OR_CA_sardine_data)
runDeck()
setwd("~/GitHub/presentation")
runDeck()
runDeck()
runDeck()
runDeck()
runDeck()
runDeck()
runDeck()
runDeck()
runDeck()
runDeck()
runDeck()
runDeck()
runDeck()
runDeck()
runDeck()
runDeck()
runDeck()
runDeck()
runDeck()
